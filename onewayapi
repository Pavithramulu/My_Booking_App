import 'package:flutter/material.dart';
import 'package:gap/gap.dart';
import 'package:intl/intl.dart';
import 'package:url_launcher/url_launcher.dart';

import '../pages/formstyle.dart';


class Oneway01 extends StatefulWidget {
  const Oneway01({super.key});

  @override
  State<Oneway01> createState() => _Oneway01State();
}

class _Oneway01State extends State<Oneway01> {
  final DateFormat _dateFormat = DateFormat('dd MMM y');
  final TextEditingController fromText = TextEditingController();
  final TextEditingController toText = TextEditingController();
  TextEditingController dateInput1 = TextEditingController();
  TextEditingController dateInput2 = TextEditingController();
  TextEditingController _textEditingController = TextEditingController();
  TextEditingController adultController = TextEditingController();
  TextEditingController childrenController = TextEditingController();
  TextEditingController infantController = TextEditingController();
  final _formKey = GlobalKey<FormState>();
  String? _result;
  String? _selectedOption = 'Economy';

  // FlightDetails? _flightDetails;
  DateTime? _selectedDepartureDate;

  Future<void> _selectDepartureDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime(2100),
      builder: (context, child) {
        return Center(
          child: Container(
            height: 400,
            width: 300,
            child: child,
          ),
        );
      },
    );

    if (picked != null) {
      setState(() {
        _selectedDepartureDate = picked;
      });
    }
  }

  void _convertOptionToResult(String selectedOption) {
    if (selectedOption == 'Economy') {
      _result = 'Y';
    } else if (selectedOption == 'Business') {
      _result = 'C';
    } else if (selectedOption == 'Firstclass') {
      _result = 'F';
    } else {
      _result = 'Unknown';
    }
  }

  void _launchURL() async {
    //@audit Navigation Action
    String origin = fromText.text;
    String destination = toText.text;
    String formattedDate =
        DateFormat('yyyy-MM-dd').format(_selectedDepartureDate!);
    final int currentIndex =
        DefaultTabController.of(context).index; // Get the selected tab index
    final List<String> tabNames = ['oneway', 'round Trip', 'multi-city'];
    String switchValueMulti = isSwitchedMulti ? 'Y' : 'N';
    String switchValueBag = isSwitchedBag ? 'Y' : 'N';
    String switchValueDirect = isSwitchedDirect ? 'Y' : 'N';
    String switchValueNear = isSwitchedNear ? 'Y' : 'N';
    final String selectedTabName = tabNames[currentIndex];
    String counter_result =
        '${adultsCount}a-${childrenCount}c-${infantsCount}l';

    String url =
        'https://buymytrip.com/flightresult/$origin-$destination/$formattedDate/$_result/$counter_result/$switchValueDirect/$switchValueNear?withBaggage=$switchValueBag&trip=$selectedTabName&extraSeats=N&isAvoidMulti=$switchValueMulti&currency=USD&alternateDate=&airlineType=Include&airlineLists=&airlineTypes=airline&stopList=&durationList=&airportType=Exclude&airportList=&avoidRegion=&fareType=&penalities=&promocode=&promoAirline=&ffpIdDisp=&ffpNumberDisp=&source=ALL&paxDisp=&coporateCode=&showAdvancedFilter=false&allowCabinType=yes&agentId=';

    // ignore: deprecated_member_use
    if (await canLaunch(url)) {
      await launch(url);
    } else {
      throw 'Could not launch $url';
    }
  }

  @override
  void initState() {
    super.initState();
    _textEditingController.text = adultsCount.toString();
    _textEditingController.text = childrenCount.toString();
    _textEditingController.text = infantsCount.toString();
    adultController.text = adultsCount.toString();
    childrenController.text = childrenCount.toString();
    infantController.text = infantsCount.toString();

    _selectedOption = 'Economy'; // Set the default value to 'Economy'
    _convertOptionToResult(_selectedOption!);
  }

  @override
  void dispose() {
    _textEditingController.dispose();
    super.dispose();
  }

  // String dropdownValue = 'Economy';

  var textValue = 'Switch is OFF';
  bool isSwitchedMulti = false;
  bool isSwitchedDirect = false; //@audit Switch Controller
  bool isSwitchedBag = false;
  bool isSwitchedNear = false;

  void toggleSwitch_Multi(bool value) {
    if (isSwitchedMulti == false) {
      setState(() {
        isSwitchedMulti = true;
        textValue = 'Switch Button is ON';
      });
      print('Switch Button is ON');
    } else {
      setState(() {
        isSwitchedMulti = false;
        textValue = 'Switch Button is OFF';
      });
      print('Switch Button is OFF');
    }
  }

  void toggleSwitch_Baggage(bool value) {
    if (isSwitchedBag == false) {
      setState(() {
        isSwitchedBag = true;
        textValue = 'Switch Button is ON';
      });
      print('Switch Button is ON');
    } else {
      setState(() {
        isSwitchedBag = false;
        textValue = 'Switch Button is OFF';
      });
      print('Switch Button is OFF');
    }
  }

  void toggleSwitch_Direct(bool value) {
    if (isSwitchedDirect == false) {
      setState(() {
        isSwitchedDirect = true;
        textValue = 'Switch Button is ON';
      });
      print('Switch Button is ON');
    } else {
      setState(() {
        isSwitchedDirect = false;
        textValue = 'Switch Button is OFF';
      });
      print('Switch Button is OFF');
    }
  }

  void toggleSwitch_Nearby(bool value) {
    if (isSwitchedNear == false) {
      setState(() {
        isSwitchedNear = true;
        textValue = 'Switch Button is ON';
      });
      print('Switch Button is ON');
    } else {
      setState(() {
        isSwitchedNear = false;
        textValue = 'Switch Button is OFF';
      });
      print('Switch Button is OFF');
    }
  }

  void swapValues() {
    String temp = fromText.text;
    fromText.text = toText.text;
    toText.text = temp;
  }

  int adultsCount = 0;
  int childrenCount = 0;
  int infantsCount = 0;

  void _showDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20),
          ),
          title: Center(
            child: Text(
              'Select Seats',
              style: TextStyle(fontSize: 25, fontWeight: FontWeight.w600),
            ),
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                children: [
                  Text(
                    'Adult',
                    style: TextStyle(fontSize: 23, fontWeight: FontWeight.w600),
                  ),
                  SizedBox(width: 40),
                  InkWell(
                    onTap: () {
                      setState(() {
                        if (adultsCount > 0) {
                          adultsCount--;
                          _textEditingController.text =
                              'A : $adultsCount , CH : $childrenCount, I : $infantsCount';
                          adultController.text = '$adultsCount';
                        }
                      });
                    },
                    child: Image.asset(
                      'assets/icons/minus-button.png',
                      height: 20,
                      width: 20,
                    ),
                  ),
                  SizedBox(width: 10),
                  Container(
                    width: 70,
                    height: 40,
                    child: TextFormField(
                      controller: adultController,
                      decoration: InputDecoration(
                        contentPadding: EdgeInsets.only(left: 30),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                      readOnly: true,
                    ),
                  ),
                  SizedBox(width: 10),
                  InkWell(
                    onTap: () {
                      setState(() {
                        if (adultsCount + childrenCount + infantsCount < 9) {
                          adultsCount++;
                          _textEditingController.text =
                              'A : $adultsCount , CH : $childrenCount, I : $infantsCount';
                          adultController.text = '$adultsCount';
                        }
                      });
                    },
                    child: Image.asset(
                      'assets/icons/plus.png',
                      height: 20,
                      width: 20,
                    ),
                  ),
                ],
              ),
              SizedBox(height: 10),
              Row(
                children: [
                  Text(
                    'Children',
                    style: TextStyle(fontSize: 23, fontWeight: FontWeight.w600),
                  ),
                  SizedBox(width: 10),
                  InkWell(
                    onTap: () {
                      setState(() {
                        if (childrenCount > 0) {
                          childrenCount--;
                          _textEditingController.text =
                              'A : $adultsCount , CH : $childrenCount, I : $infantsCount';
                          childrenController.text = '$childrenCount';
                        }
                      });
                    },
                    child: Image.asset(
                      'assets/icons/minus-button.png',
                      height: 20,
                      width: 20,
                    ),
                  ),
                  SizedBox(width: 10),
                  Container(
                    width: 70,
                    height: 40,
                    child: TextFormField(
                      controller: childrenController,
                      decoration: InputDecoration(
                        contentPadding: EdgeInsets.only(left: 30),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                      readOnly: true,
                    ),
                  ),
                  SizedBox(width: 10),
                  InkWell(
                    onTap: () {
                      setState(() {
                        if (adultsCount + childrenCount + infantsCount < 9) {
                          childrenCount++;
                          _textEditingController.text =
                              'A : $adultsCount , CH : $childrenCount, I : $infantsCount';
                          childrenController.text = '$childrenCount';
                        }
                      });
                    },
                    child: Image.asset(
                      'assets/icons/plus.png',
                      height: 20,
                      width: 20,
                    ),
                  ),
                ],
              ),
              SizedBox(height: 10),
              Row(
                children: [
                  Text(
                    'Infant',
                    style: TextStyle(fontSize: 23, fontWeight: FontWeight.w600),
                  ),
                  SizedBox(width: 35),
                  InkWell(
                    onTap: () {
                      setState(() {
                        if (infantsCount > 0) {
                          infantsCount--;
                          _textEditingController.text =
                              'A : $adultsCount , CH : $childrenCount, I : $infantsCount';
                          infantController.text = '$infantsCount';
                        }
                      });
                    },
                    child: Image.asset(
                      'assets/icons/minus-button.png',
                      height: 20,
                      width: 20,
                    ),
                  ),
                  SizedBox(width: 10),
                  Container(
                    width: 70,
                    height: 40,
                    child: TextFormField(
                      controller: infantController,
                      decoration: InputDecoration(
                        contentPadding: EdgeInsets.only(left: 30),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                        ),
                      ),
                      readOnly: true,
                    ),
                  ),
                  SizedBox(width: 10),
                  InkWell(
                    onTap: () {
                      setState(() {
                        if (adultsCount + childrenCount + infantsCount < 9) {
                          infantsCount++;
                          _textEditingController.text =
                              'A : $adultsCount , CH : $childrenCount, I : $infantsCount';
                          infantController.text = '$infantsCount';
                        }
                      });
                    },
                    child: Image.asset(
                      'assets/icons/plus.png',
                      height: 20,
                      width: 20,
                    ),
                  ),
                ],
              ),
            ],
          ),
          actions: [
            GestureDetector(
              onTap: () {
                Navigator.pop(context);
              },
              child: Padding(
                padding: const EdgeInsets.all(8.0),
                child: Container(
                  height: 35,
                  width: 70,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(10),
                    color: Color(0xff05386d),
                  ),
                  child: Center(
                    child: Text(
                      'OK',
                      style: TextStyle(
                        color: Colors.white,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
          splashColor: Colors.white,
          highlightColor: Colors.white,
          focusColor: Colors.white),
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        resizeToAvoidBottomInset: false,
        body: Column(
          children: [
            Gap(50),
            Form(
              key: _formKey,
              child: Stack(
                children: [
                  TextFormField(
                    style: Styles.fontStyle,
                    controller: fromText,
                    decoration: InputDecoration(
                      labelText: 'From ?',
                      prefixIcon: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Icon(
                            Icons.flight_takeoff,
                            color: Colors.blue[500],
                          )),
                      focusedBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                              width: 0.8, color: Colors.grey.shade300),
                          borderRadius: BorderRadius.circular(07)),
                      border: OutlineInputBorder(
                          borderSide: BorderSide(
                              width: 0.8, color: Colors.grey.shade300),
                          borderRadius: BorderRadius.circular(07)),
                      enabledBorder: OutlineInputBorder(
                          borderSide: BorderSide(
                              width: 0.8, color: Colors.grey.shade300),
                          borderRadius: BorderRadius.circular(07)),
                    ),
                    validator: (value) {
                      if (value!.isEmpty) {
                        return 'Please enter the departure location';
                      }
                      return null;
                    },
                    onSaved: (value) {
                      // _flightDetails = FlightDetails(
                      //   from: value!,
                      //   to: _flightDetails?.to ?? '',
                      //   date: _flightDetails?.date ?? DateTime.now(),
                      //   adult: _flightDetails?.adult ?? 1,
                      //   type: _flightDetails?.type ?? 'Economy',
                      //   currency: _flightDetails?.currency ?? 'USD',
                      // );
                    },
                  ),
                  Padding(
                    padding: const EdgeInsets.only(top: 70),
                    child: TextFormField(
                      style: Styles.fontStyle,
                      controller: toText,
                      decoration: InputDecoration(
                        labelText: 'To ?',
                        prefixIcon: Padding(
                          padding: const EdgeInsets.all(8.0),
                          child: Icon(
                            Icons.flight_land,
                            color: Colors.blue[500],
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                            borderSide: BorderSide(
                                width: 0.8, color: Colors.grey.shade300),
                            borderRadius: BorderRadius.circular(07)),
                        border: OutlineInputBorder(
                            borderSide: BorderSide(
                                width: 0.8, color: Colors.grey.shade300),
                            borderRadius: BorderRadius.circular(07)),
                        enabledBorder: OutlineInputBorder(
                            borderSide: BorderSide(
                                width: 0.8, color: Colors.grey.shade300),
                            borderRadius: BorderRadius.circular(07)),
                      ),
                      validator: (value) {
                        if (value!.isEmpty) {
                          return 'Please enter the destination';
                        }
                        return null;
                      },
                      onSaved: (value) {
                        // _flightDetails = FlightDetails(
                        //   from: _flightDetails?.from ?? '',
                        //   to: value!,
                        //   date: _flightDetails?.date ?? DateTime.now(),
                        //   adult: _flightDetails?.adult ?? 1,
                        //   type: _flightDetails?.type ?? 'Economy',
                        //   currency: _flightDetails?.currency ?? 'USD',
                        // );
                      },
                    ),
                  ),
                  GestureDetector(
                    onTap: () {
                      swapValues();
                    },
                    child: Padding(
                      padding: EdgeInsets.only(top: 38, left: 350),
                      child: Container(
                        width: 50,
                        height: 50,
                        child: Icon(
                          Icons.swap_vert_circle,
                          color: Colors.grey[600],
                          size: 45,
                        ),
                      ),
                    ),
                  ),
                  SizedBox(
                    width: 20,
                  ),
                ],
              ),
            ),
            Gap(10),
            Container(
              child: TextFormField(
                style: Styles.fontStyle,
                controller: TextEditingController(
                  text: _selectedDepartureDate != null
                      ? _dateFormat.format(_selectedDepartureDate!)
                      : '',
                ),
                decoration: InputDecoration(
                  labelText: 'Departure',
                  prefixIcon: Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Icon(
                        Icons.edit_calendar,
                        color: Colors.blue[500],
                      )),
                  focusedBorder: OutlineInputBorder(
                      borderSide:
                          BorderSide(width: 0.8, color: Colors.grey.shade300),
                      borderRadius: BorderRadius.circular(07)),
                  border: OutlineInputBorder(
                      borderSide:
                          BorderSide(width: 0.8, color: Colors.grey.shade300),
                      borderRadius: BorderRadius.circular(07)),
                  enabledBorder: OutlineInputBorder(
                      borderSide:
                          BorderSide(width: 0.8, color: Colors.grey.shade300),
                      borderRadius: BorderRadius.circular(07)),
                ),
                readOnly: true,
                onTap: () => _selectDepartureDate(context),
              ),
            ),
            Row(
              children: [
                Padding(
                  padding: const EdgeInsets.only(top: 08),
                  child: Container(
                    width: 200,
                    height: 58,
                    child: DropdownButtonFormField(
                      decoration: InputDecoration(
                        prefixIcon: Icon(
                          Icons.flight_class,
                          color: Colors.blue[500],
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(07),
                          borderSide:
                              BorderSide(color: Colors.grey.shade300, width: 1),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(07),
                          borderSide:
                              BorderSide(color: Colors.grey.shade300, width: 1),
                        ),
                      ),
                      value: _selectedOption,
                      onChanged: (value) {
                        setState(() {
                          _selectedOption = value;
                          _convertOptionToResult(_selectedOption!);
                        });
                      },
                      items: [
                        DropdownMenuItem(
                          value: 'Economy',
                          child: Text('Economy'),
                        ),
                        DropdownMenuItem(
                          value: 'Business',
                          child: Text('Business'),
                        ),
                        DropdownMenuItem(
                          value: 'Firstclass',
                          child: Text('Firstclass'),
                        ),
                      ],
                      validator: (value) {
                        if (value == null) {
                          return 'Please select an option';
                        }
                        return null;
                      },
                      //   items:
                      //    <String>['Economy', 'Business', 'First Class']
                      //       .map<DropdownMenuItem<String>>((String value) {
                      //     return DropdownMenuItem<String>(
                      //       value: value,
                      //       child: Text(
                      //         value,
                      //         style: Styles.fontStyle,
                      //       ),
                      //     );
                      //   }).toList(),
                      // ),
                    ),
                  ),
                ),
                Padding(
                  padding: EdgeInsets.only(left: 08, top: 8),
                  child: Container(
                    width: 200,
                    height: 57,
                    child: TextFormField(
                      //@audit Travellers Controller
                      style: Styles.fontStyle,
                      autovalidateMode: AutovalidateMode.onUserInteraction,
                      controller: _textEditingController,
                      decoration: InputDecoration(
                        labelText: 'Travellers',
                        prefixIcon: Padding(
                          padding: const EdgeInsets.all(10.0),
                          child: Icon(
                            Icons.airline_seat_recline_normal,
                            color: Colors.blue[500],
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                            borderSide: BorderSide(
                                width: 1, color: Colors.grey.shade300),
                            borderRadius: BorderRadius.circular(07)),
                        border: OutlineInputBorder(
                            borderSide: BorderSide(
                                width: 1, color: Colors.grey.shade300),
                            borderRadius: BorderRadius.circular(07)),
                        enabledBorder: OutlineInputBorder(
                            borderSide: BorderSide(
                                width: 1, color: Colors.grey.shade300),
                            borderRadius: BorderRadius.circular(07)),
                      ),
                      readOnly: true,
                      onTap: _showDialog,
                    ),
                  ),
                ),
              ],
            ),
            Container(
              child: Align(
                child: Padding(
                  padding: const EdgeInsets.only(top: 15),
                  child: Stack(
                    children: [
                      Padding(
                        padding: const EdgeInsets.only(bottom: 10),
                        child: Row(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Transform.scale(
                                scale: 0.80,
                                child: Switch(
                                  //@audit Swith Menu
                                  onChanged: toggleSwitch_Multi,
                                  value: isSwitchedMulti,
                                  activeColor: Colors.white,
                                  activeTrackColor: Colors.blue[900],
                                  inactiveThumbColor: Colors.white,
                                  inactiveTrackColor: Colors.grey.shade400,
                                ),
                              ),
                            ),
                            Text(
                              'Exclude Multi-Ticket',
                              style: Styles.switchStyle,
                            ),
                            Padding(
                              padding: const EdgeInsets.only(left: 80),
                              child: Row(
                                children: [
                                  Align(
                                    alignment: Alignment.topRight,
                                    child: Transform.scale(
                                      scale: 0.80,
                                      child: Switch(
                                        onChanged: toggleSwitch_Direct,
                                        value: isSwitchedDirect,
                                        activeColor: Colors.white,
                                        activeTrackColor: Colors.blue[900],
                                        inactiveThumbColor: Colors.white,
                                        inactiveTrackColor:
                                            Colors.grey.shade400,
                                      ),
                                    ),
                                  ),
                                  Text(
                                    'Direct Flight',
                                    style: Styles.switchStyle,
                                  )
                                ],
                              ),
                            )
                          ],
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.only(top: 30),
                        child: Row(
                          children: [
                            Align(
                              alignment: Alignment.topLeft,
                              child: Transform.scale(
                                scale: 0.80,
                                child: Switch(
                                  onChanged: toggleSwitch_Baggage,
                                  value: isSwitchedBag,
                                  activeColor: Colors.white,
                                  activeTrackColor: Colors.blue[900],
                                  inactiveThumbColor: Colors.white,
                                  inactiveTrackColor: Colors.grey.shade400,
                                ),
                              ),
                            ),
                            Text(
                              'Baggage Inclusive',
                              style: Styles.switchStyle,
                            ),
                            Padding(
                              padding: const EdgeInsets.only(left: 90),
                              child: Row(
                                children: [
                                  Align(
                                    alignment: Alignment.topLeft,
                                    child: Transform.scale(
                                      scale: 0.80,
                                      child: Switch(
                                        onChanged: toggleSwitch_Nearby,
                                        value: isSwitchedNear,
                                        activeColor: Colors.white,
                                        activeTrackColor: Colors.blue[900],
                                        inactiveThumbColor: Colors.white,
                                        inactiveTrackColor:
                                            Colors.grey.shade400,
                                      ),
                                    ),
                                  ),
                                  Text(
                                    'Nearby Airport',
                                    style: Styles.switchStyle,
                                  ),
                                ],
                              ),
                            )
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
            SizedBox(
              height: 15,
            ),
            GestureDetector(
              onTap: _launchURL,
              child: Container(
                height: 40,
                width: 250,
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(10),
                  color: Color(0xff05386d),
                ),
                child: Center(
                  child: Text(
                    'Search Flights',
                    style: Styles.buttonfontStyle,
                  ),
                ),
              ),
            )
          ],
        ),
      ),
    );
  }
}
